server:
  port: 8080
  host: "0.0.0.0"

db:
  source: jdbc
  connection:
    username: "clone"
    password:
    url: "jdbc:h2:./src/main/resources/clone"
    poolName: h2
    initializationFailTimeout: -1
    connectionTimeout: 2000
    helidon:
      pool-metrics:
        enabled: true
        # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
        name-prefix: "hikari."
  services:
    metrics:
      - type: METER
  health-check:
    type: "dml"
    statementName: "ping"

  statements:
    # Ping statement
    ping: "SET @HELIDON_PING=0"
    # Create database schema
    create-artefact: " drop table if exists ARTEFACT cascade;

    create table ARTEFACT
    (
        ID    LONG,
        NAME CHARACTER VARYING(200) not null DEFAULT '',
        DATEADD    DATE    default LOCALTIMESTAMP,
        ANALYZING  INTEGER default 0,
        URL        CHARACTER VARYING(200) DEFAULT '',
        constraint ARTEFACT_PK
            primary key (ID)
    );"

    create-jar: " drop table if exists JAR cascade;
            create table JAR
            (
                IDJAR  LONG auto_increment primary key,
                CLASSES    LONGBLOB,
                SOURCES    LONGBLOB
            );"
    create-instruction: "drop table if exists Instruction cascade;
    
    create table Instruction
          (
            idHash LONG auto_increment primary key,
            hashValue     INTEGER,
            file    CHARACTER VARYING(100) not null,
            line INTEGER,
            id LONG,
            constraint fk foreign key (id) references Artefact (id)
          );"
    create-metadata: "drop table if exists METADATA cascade;

        create table METADATA
              (
                idMeta LONG,
                groupId     CHARACTER VARYING(100) not null,
                artifactId CHARACTER VARYING(100) not null,
                version    CHARACTER VARYING(100) not null
              );"
    create-clone: "drop table if exists CLONE cascade;

            create table CLONE
                  (
                    idClone LONG auto_increment,
                    id1   LONG,
                    id2 LONG,
                    constraint CLONE_pk primary key (idClone, id1, id2),
                    constraint FK_CLONE1 foreign key (id1) references INSTRUCTION (idHash),
                    constraint FK_CLONE2 foreign key (id2) references INSTRUCTION (idHash)
                  );"
    create-score: "drop table if exists SCORE cascade;

                create table SCORE
                      (
                        id1 LONG,
                        id2   LONG,
                        score LONG,
                        constraint SCORE_pk primary key (id1, id2),
                        constraint FK_SCORE1 foreign key (id1) references ARTEFACT (ID),
                        constraint FK_SCORE2 foreign key (id2) references ARTEFACT (ID)
                      );"
    select-all-types: "SELECT * FROM TEST"
    select-all-artefacts: "SELECT * FROM ARTEFACT"
    select-metadata-by-id: "SELECT * FROM METADATA WHERE idMeta = :id"
    select-art-by-id: "SELECT * FROM ARTEFACT WHERE ID = :id"
    insert-artefact: "INSERT INTO Artefact(ID, NAME, URL) VALUES(?, ?, ?)"
    insert-jar: "INSERT INTO JAR(CLASSES, SOURCES) VALUES(?, ?)"
    insert-instruction: "INSERT INTO Instruction(hashValue, file, line, id) VALUES(?, ?, ?, ?)"
    insert-metadata: "INSERT INTO METADATA(IDMETA, GROUPID, ARTIFACTID, VERSION) VALUES(?, ?, ?, ?)"
    insert-clone: "INSERT INTO CLONE(ID1, ID2) VALUES(?, ?)"
    insert-clone-id: "INSERT INTO CLONE(IDCLONE, ID1, ID2) VALUES(?, ?, ?)"
    get-last-jar: "SELECT * FROM JAR ORDER BY IDJAR DESC LIMIT 1"
    select-jar-by-id: "SELECT * FROM JAR WHERE IDJAR = :id"
    select-all-hash: "SELECT * FROM INSTRUCTION WHERE ID != :id"
    select-hash-by-id: "SELECT * FROM INSTRUCTION WHERE ID = :id"
    select-instr-by-idHash: "SELECT * FROM INSTRUCTION WHERE IDHASH = :id"
    get-last-clone-id: "SELECT IDCLONE FROM CLONE ORDER BY IDCLONE DESC LIMIT 1"
    get-clone-of-art: "SELECT * FROM INSTRUCTION AS H1 JOIN CLONE JOIN INSTRUCTION AS H2 WHERE ID1 = H1.IDHASH AND ID2 = H2.IDHASH AND (H1.ID = :id1 or H2.ID = :id2)"

    count-instr-by-id: "SELECT COUNT(*) AS NB FROM INSTRUCTION WHERE ID = :id"
    count-clone-by-id: "SELECT COUNT(*) AS NB, H1.ID as id1, H2.ID as id2 FROM INSTRUCTION AS H1 JOIN CLONE JOIN INSTRUCTION AS H2 WHERE ID1 = H1.IDHASH AND ID2 = H2.IDHASH AND (H1.ID = :id1 or H2.ID = :id2) GROUP BY (H1.ID, H2.ID)"
    insert-score: "INSERT INTO SCORE(ID1, ID2, SCORE) VALUES(?, ?, ?)"
    select-best-scores: "SELECT * FROM SCORE WHERE ID1 = :id ORDER BY SCORE DESC LIMIT 5"

