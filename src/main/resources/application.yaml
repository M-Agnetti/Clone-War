server:
  port: 8080
  host: "0.0.0.0"

db:
  source: jdbc
  connection:
    username: "clone"
    password:
    url: "jdbc:h2:./src/main/resources/clone"
    poolName: h2
    initializationFailTimeout: -1
    connectionTimeout: 2000
    helidon:
      pool-metrics:
        enabled: true
        # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
        name-prefix: "hikari."
  services:
    metrics:
      - type: METER
  health-check:
    type: "dml"
    statementName: "ping"

  statements:
    # Ping statement
    ping: "SET @HELIDON_PING=0"
    # Create database schema
    create-types: "CREATE TABLE TEST (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL)"
    create-artefact: " drop table if exists ARTEFACT cascade;

    create table ARTEFACT
    (
        ID    INTEGER,
        NAME CHARACTER VARYING(200) not null DEFAULT '',
        DATEADD    DATE    default LOCALTIMESTAMP,
        ANALYZING  INTEGER default 0,
        URL        CHARACTER VARYING(200) DEFAULT '',
        constraint ARTEFACT_PK
            primary key (ID)
    );"
    create-source-jar: " drop table if exists SOURCESJAR cascade;

        create table SOURCESJAR
        (
            IDSOURCES  INTEGER,
            SOURCES    LONGBLOB
        );"
    create-class-jar: " drop table if exists CLASSJAR cascade;
            create table CLASSJAR
            (
                IDCLASS  INTEGER auto_increment primary key,
                CLASSES    LONGBLOB
            );"
    create-instruction: "drop table if exists Instruction cascade;
    
    create table Instruction
          (
            idHash INTEGER auto_increment primary key,
            hashValue     INTEGER,
            file    CHARACTER VARYING(100) not null,
            line INTEGER,
            id INTEGER,
            constraint fk foreign key (id) references Artefact (id)
          );"
    create-metadata: "drop table if exists METADATA cascade;

        create table METADATA
              (
                idMeta INTEGER,
                groupId     CHARACTER VARYING(100) not null,
                artifactId CHARACTER VARYING(100) not null,
                version    CHARACTER VARYING(100) not null,
              );"
    select-all-types: "SELECT * FROM TEST"
    select-all-artefacts: "SELECT * FROM ARTEFACT"
    select-artefact-by-id: "SELECT * FROM ARTEFACT WHERE id = :id"
    insert-artefact: "INSERT INTO Artefact(ID, NAME, URL) VALUES(?, ?, ?)"
    insert-source-jar: "INSERT INTO SOURCESJAR(IDSOURCES, SOURCES) VALUES(?, ?)"
    insert-class-jar: "INSERT INTO CLASSJAR(CLASSES) VALUES(?)"
    insert-instruction: "INSERT INTO Instruction(hashValue, file, line, id) VALUES(?, ?, ?, ?)"
    get-last-class-jar: "SELECT * FROM CLASSJAR ORDER BY IDCLASS DESC LIMIT 1"
